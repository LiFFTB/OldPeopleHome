///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              23/Aug/2019  12:23:37
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\roomPwrManSys.c
//    Command line       =  
//        -f C:\Users\VULCAN\AppData\Local\Temp\EW76BF.tmp
//        (E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\roomPwrManSys.c
//        -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC
//        -D MT_ZDO_FUNC -D SAPP_ZSTACK -lC
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List
//        -lA
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00800000 -DZDAPP_CONFIG_PAN_ID=0x0057
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\
//        -I
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\EndDeviceEB\List\roomPwrManSys.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME roomPwrManSys

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I

        PUBLIC `??OutputExecuteBResAvailable::?relay`
        FUNCTION `??OutputExecuteBResAvailable::?relay`,0203H
        PUBLIC `??outputExecuteB::?relay`
        FUNCTION `??outputExecuteB::?relay`,0203H
        PUBLIC `??outputExecuteBTimeout::?relay`
        FUNCTION `??outputExecuteBTimeout::?relay`,0203H
        PUBLIC OutputExecuteBResAvailable
        FUNCTION OutputExecuteBResAvailable,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P1
        PUBLIC funcCount
        PUBLIC funcList
        PUBLIC outputExecuteB
        FUNCTION outputExecuteB,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC outputExecuteBTimeout
        FUNCTION outputExecuteBTimeout,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalIOSetLevel       SYMBOL "HalIOSetLevel"
`??HalIOSetLevel::?relay` SYMBOL "?relay", HalIOSetLevel
HalIOSetOutput      SYMBOL "HalIOSetOutput"
`??HalIOSetOutput::?relay` SYMBOL "?relay", HalIOSetOutput
SendData            SYMBOL "SendData"
`??SendData::?relay` SYMBOL "?relay", SendData
OutputExecuteBResAvailable SYMBOL "OutputExecuteBResAvailable"
`??OutputExecuteBResAvailable::?relay` SYMBOL "?relay", OutputExecuteBResAvailable
outputExecuteB      SYMBOL "outputExecuteB"
`??outputExecuteB::?relay` SYMBOL "?relay", outputExecuteB
outputExecuteBTimeout SYMBOL "outputExecuteBTimeout"
`??outputExecuteBTimeout::?relay` SYMBOL "?relay", outputExecuteBTimeout

        EXTERN `??HalIOSetLevel::?relay`
        FUNCTION `??HalIOSetLevel::?relay`,00H
        EXTERN `??HalIOSetOutput::?relay`
        FUNCTION `??HalIOSetOutput::?relay`,00H
        EXTERN `??SendData::?relay`
        FUNCTION `??SendData::?relay`,00H
        EXTERN HalIOSetLevel
        FUNCTION HalIOSetLevel,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalIOSetOutput
        FUNCTION HalIOSetOutput,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SendData
        FUNCTION SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\qq下载文件\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\roomPwrManSys.c
//    1 #include "roomPwrManSys.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//    2 #include "hal_io.h"
//    3 #include <string.h>
//    4 #include "hal_adc.h"
//    5 #include "hal_assert.h"
//    6 #include "hal_board.h"
//    7 #include "hal_ccm.h"
//    8 #include "hal_defs.h"
//    9 #include "hal_drivers.h"
//   10 #include "hal_flash.h"
//   11 #include "hal_irdec.h"
//   12 #include "hal_key.h"
//   13 #include "hal_lcd.h"
//   14 #include "hal_led.h"
//   15 #include "hal_sleep.h"
//   16 #include "hal_timer.h"
//   17 #include "hal_uart.h"
//   18 
//   19 /********************************/
//   20 /* 协调器代码                   */
//   21 /********************************/
//   22 #if defined(ZDO_COORDINATOR)
//   23 uint8 descPkg[] = {
//   24     0x03, DevIRPers, 0
//   25 };
//   26 
//   27 static uint16 nodeNwkAddr[Devmax];
//   28 static uint8 nodeEndPoint[Devmax];
//   29 
//   30 static uint8 irPersStatus = 0;
//   31 static uint8 illumStatus = 0;
//   32 static uint8 controlStatus = 0;
//   33 void roomPwrManSys_StaChgRt(struct ep_info_t *ep);
//   34 void roomPwrManSys_StaChgRt(struct ep_info_t *ep)
//   35 {
//   36     // 寻找人体红外节点 
//   37     descPkg[1] = DevIRPers;
//   38     SendData(ep->ep, descPkg, 0xFFFF, CONTROL_ENDPOINT, sizeof(descPkg));
//   39 }
//   40 void roomPwrManSys_IncmRt(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg);
//   41 void roomPwrManSys_IncmRt(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
//   42 {
//   43     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//   44     if((endPoint == CONTROL_ENDPOINT) && (msg->Data[0] == 0x03))
//   45     {
//   46         // endPoint: msg->Data[1], rCycle: msg->Data[2]
//   47         // 将上一次寻找的节点地址和端点号保存起来
//   48         nodeNwkAddr[descPkg[1]] = addr;
//   49         nodeEndPoint[descPkg[1]] = msg->Data[1];
//   50         // 准备寻找下一个节点
//   51         descPkg[1] = descPkg[1] + 1;
//   52         // 所有节点是否都已经寻找完毕?
//   53         if(descPkg[1] < Devmax)
//   54             SendData(ep->ep, descPkg, 0xFFFF, CONTROL_ENDPOINT, sizeof(descPkg));
//   55     }
//   56     else
//   57     {
//   58         if(addr == nodeNwkAddr[DevIllum])
//   59         {
//   60             // 接收到光照度传感器数据
//   61             uint16 i = 0;
//   62             memcpy(&i, msg->Data, 2);
//   63             illumStatus = i < 45000;
//   64             HalUARTWrite(HAL_UART_PORT_0, msg->Data, 2);
//   65         }
//   66         else if(addr == nodeNwkAddr[DevIRPers])
//   67         {
//   68             // 接收到人体红外传感器数据
//   69             irPersStatus = !!(msg->Data[0]);
//   70         }
//   71         if(nodeNwkAddr[DevExecuter] != 0xFFFF)
//   72         {
//   73             // 如果执行节点存在
//   74             uint8 ctrl = 0;
//   75             if(irPersStatus && illumStatus)
//   76                 ctrl = 0x0f;
//   77             // 如果灯光的当前状态与需要设置的状态不一样则发送数据
//   78             if(controlStatus != ctrl)
//   79                 SendData(ep->ep, &ctrl, nodeNwkAddr[DevExecuter], nodeEndPoint[DevExecuter], 1);
//   80             controlStatus = ctrl;
//   81         }
//   82     }
//   83 }
//   84 void roomPwrManSys_ToRt(struct ep_info_t *ep);
//   85 void roomPwrManSys_ToRt(struct ep_info_t *ep)
//   86 {
//   87     // 超时函数,用于检查节点搜索是否完成
//   88     // 如果没有完成,则继续搜索
//   89     if(descPkg[1] < Devmax)
//   90     {
//   91         SendData(ep->ep, descPkg, 0xFFFF, CONTROL_ENDPOINT, sizeof(descPkg));
//   92     }
//   93 }
//   94 void roomPwrManSys_ResAvbRt(struct ep_info_t *ep, RES_TYPE type, void *res);
//   95 void roomPwrManSys_ResAvbRt(struct ep_info_t *ep, RES_TYPE type, void *res)
//   96 {
//   97     switch(type)
//   98     {
//   99     case ResInit:
//  100         memset(nodeNwkAddr, 0xFF, sizeof(nodeNwkAddr));
//  101         memset(nodeEndPoint, 0xFF, sizeof(nodeEndPoint));
//  102         break;
//  103     case ResUserTimer:
//  104         break;
//  105     case ResControlPkg:
//  106         break;
//  107     }
//  108 }
//  109 #else
//  110 /********************************/
//  111 /* 人体红外节点代码             */
//  112 /********************************/
//  113 #if defined(IRPERS_NODE)
//  114 #define SAFTY_IO_GROUP      1
//  115 #define SAFTY_IO_BIT        0
//  116 void sensorIRPersResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res);
//  117 void sensorIRPersResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res)
//  118 {
//  119     if(type == ResInit)
//  120     {
//  121         HalIOSetInput(SAFTY_IO_GROUP, SAFTY_IO_BIT, Pull_Down);
//  122         HalIOIntSet(ep->ep, SAFTY_IO_GROUP, SAFTY_IO_BIT, IOInt_Rising, 0);
//  123     }
//  124     //IO端口中断触发，中断源检测
//  125     if(type == ResIOInt)
//  126     {
//  127         uint8 IRPersValue = 1;
//  128         SendData(ep->ep, &IRPersValue, 0x0000, TRANSFER_ENDPOINT, sizeof(IRPersValue));
//  129     }
//  130 }
//  131 void sensorIRPersTimeout(struct ep_info_t *ep);
//  132 void sensorIRPersTimeout(struct ep_info_t *ep)
//  133 {
//  134     uint8 value = HalIOGetLevel(SAFTY_IO_GROUP, SAFTY_IO_BIT);
//  135     SendData(ep->ep, &value, 0x0000, TRANSFER_ENDPOINT, sizeof(value));
//  136 }
//  137 #endif
//  138 /********************************/
//  139 /* 光照度节点代码               */
//  140 /********************************/
//  141 #if defined(ILLUM_NODE)
//  142 void sensorILLumTimeout(struct ep_info_t *ep);
//  143 void sensorILLumTimeout(struct ep_info_t *ep)
//  144 {
//  145     uint16 LightValue = 256 - (HalAdcRead(0, HAL_ADC_RESOLUTION_14) >> 3);
//  146     // 将AD值变换为光照度的100倍
//  147     LightValue = LightValue * 39;// * 10000 / 256;
//  148     SendData(ep->ep, &LightValue, 0x0000, TRANSFER_ENDPOINT, sizeof(LightValue));
//  149 }
//  150 #endif
//  151 /********************************/
//  152 /* 执行节点代码                 */
//  153 /********************************/
//  154 #if defined(EXECUTER_NODE)
//  155 #define ControlInit()   do { HalIOSetOutput(1,4);HalIOSetOutput(1,5);HalIOSetOutput(1,6);HalIOSetOutput(1,7);Control(0); } while(0)
//  156 #define Control(mask)   do { HalIOSetLevel(1,4,mask&0x01);HalIOSetLevel(1,5,mask&0x02);HalIOSetLevel(1,6,mask&0x04);HalIOSetLevel(1,7,mask&0x08); } while(0)
//  157 void OutputExecuteBResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  158 void OutputExecuteBResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res)
OutputExecuteBResAvailable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function OutputExecuteBResAvailable
        CODE
//  159 {
        FUNCALL OutputExecuteBResAvailable, HalIOSetOutput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetOutput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetOutput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetOutput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OutputExecuteBResAvailable, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  160     if(type == ResInit)
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??OutputExecuteBResAvailable_0
//  161         ControlInit();
        ; Setup parameters for call to function HalIOSetOutput
        MOV       R2,#0x4
        MOV       R1,#0x1
        LCALL     `??HalIOSetOutput::?relay`; Banked call to: HalIOSetOutput
        ; Setup parameters for call to function HalIOSetOutput
        MOV       R2,#0x5
        MOV       R1,#0x1
        LCALL     `??HalIOSetOutput::?relay`; Banked call to: HalIOSetOutput
        ; Setup parameters for call to function HalIOSetOutput
        MOV       R2,#0x6
        MOV       R1,#0x1
        LCALL     `??HalIOSetOutput::?relay`; Banked call to: HalIOSetOutput
        ; Setup parameters for call to function HalIOSetOutput
        MOV       R2,#0x7
        MOV       R1,#0x1
        LCALL     `??HalIOSetOutput::?relay`; Banked call to: HalIOSetOutput
        ; Setup parameters for call to function HalIOSetLevel
        MOV       R3,#0x0
        MOV       R2,#0x4
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        MOV       R3,#0x0
        MOV       R2,#0x5
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        MOV       R3,#0x0
        MOV       R2,#0x6
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        MOV       R3,#0x0
        MOV       R2,#0x7
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
//  162 }
??OutputExecuteBResAvailable_0:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  163 void outputExecuteB(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  164 void outputExecuteB(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
outputExecuteB:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function outputExecuteB
        CODE
//  165 {
        FUNCALL outputExecuteB, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL outputExecuteB, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL outputExecuteB, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL outputExecuteB, HalIOSetLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL outputExecuteB, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
//  166     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  167     Control(msg->Data[0]);
        MOV       A,R0
        ADD       A,#0x3
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
        ; Setup parameters for call to function HalIOSetLevel
        MOV       DPL,R6
        MOV       DPH,A
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       R3,A
        MOV       R2,#0x4
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        ANL       A,#0x2
        MOV       R3,A
        MOV       R2,#0x5
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        ANL       A,#0x4
        MOV       R3,A
        MOV       R2,#0x6
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        ANL       A,#0x8
        MOV       R3,A
        MOV       R2,#0x7
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
//  168     SendData(ep->ep, &msg->Data[0], 0x0000, TRANSFER_ENDPOINT, 1);
        ; Setup parameters for call to function SendData
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??SendData::?relay`; Banked call to: SendData
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  169 }
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function outputExecuteB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function outputExecuteB
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function outputExecuteB
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       R1,#0x1
        LCALL     `??HalIOSetLevel::?relay`; Banked call to: HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        ; Setup parameters for call to function HalIOSetLevel
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function outputExecuteB
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function outputExecuteB
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-4
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function outputExecuteB
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-4
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function outputExecuteB
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_2
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  170 void outputExecuteBTimeout(struct ep_info_t *ep);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  171 void outputExecuteBTimeout(struct ep_info_t *ep)
outputExecuteBTimeout:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function outputExecuteBTimeout
        CODE
//  172 {
        FUNCALL outputExecuteBTimeout, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  173     uint8 value = P1 >> 4;
        MOV       A,0x90
        SWAP      A
        ANL       A,#0xf
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  174     SendData(ep->ep, &value, 0x0000, TRANSFER_ENDPOINT, sizeof(value));
        ; Setup parameters for call to function SendData
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??SendData::?relay`; Banked call to: SendData
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  175 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock12
        REQUIRE _A_P1
//  176 #endif
//  177 /********************************/
//  178 /* 温度传感器                   */
//  179 /********************************/
//  180 #if defined(TEMP_NODE) || defined(HUMM_NODE)
//  181 #include "sht10.h"
//  182 static uint16 TempValue = 0;
//  183 #endif
//  184 #if defined(TEMP_NODE)
//  185 void sensorTempResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res);
//  186 void sensorTempResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res)
//  187 {
//  188     if(type == ResInit)
//  189     {
//  190         SHT10_init(0x01);
//  191     }
//  192 }
//  193 void sensorTempTimeout(struct ep_info_t *ep);
//  194 void sensorTempTimeout(struct ep_info_t *ep)
//  195 {
//  196     unsigned int value = 0;
//  197     unsigned char checksum = 0;
//  198     SHT10_Measure(&value,&checksum, TEMPERATURE);
//  199     TempValue = (value << 2) - 3960;
//  200     SendData(ep->ep, &TempValue, 0x0000, TRANSFER_ENDPOINT, sizeof(TempValue));
//  201 }
//  202 #endif
//  203 /********************************/
//  204 /* 湿度传感器                   */
//  205 /********************************/
//  206 #if defined(HUMM_NODE)
//  207 void sensorHummResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res);
//  208 void sensorHummResAvailable(struct ep_info_t *ep, RES_TYPE type, void *res)
//  209 {
//  210     if(type == ResInit)
//  211     {
//  212         SHT10_init(0x01);
//  213     }
//  214 }
//  215 void sensorHummTimeout(struct ep_info_t *ep);
//  216 void sensorHummTimeout(struct ep_info_t *ep)
//  217 {
//  218     const float C1 = -4.0f;              // for 8 Bit
//  219     const float C2 = +0.648f;            // for 8 Bit
//  220     const float C3 = -0.0000072f;        // for 8 Bit
//  221     const float T1 = 0.01f;              // for 8 bit
//  222     const float T2 = 0.00128f;           // for 8 bit
//  223     float rh_lin    =   0.0f;                     // rh_lin: Humidity linear
//  224     float rh_true   =   0.0f;                    // rh_true: Temperature compensated humidity
//  225     float t_C   = 0.0f;                        // t_C   : Temperature []
//  226 
//  227     unsigned int HumiValue = 0;
//  228     unsigned char checksum = 0;
//  229     SHT10_Measure(&HumiValue,&checksum, HUMIDITY);
//  230     rh_lin=C3*HumiValue*HumiValue + C2*HumiValue + C1;     //calc. humidity from ticks to [%RH]
//  231     rh_true=(t_C-25)*(T1+T2*HumiValue)+rh_lin;   //calc. temperature compensated humidity [%RH]
//  232     if(rh_true>100)
//  233         rh_true=100;       //cut if the value is outside of
//  234     if(rh_true<0.1)
//  235         rh_true=0.1f;       //the physical possible range
//  236     HumiValue = (unsigned int)(rh_true * 100);
//  237     SendData(ep->ep, &HumiValue, 0x0000, TRANSFER_ENDPOINT, sizeof(HumiValue));
//  238 }
//  239 #endif
//  240 #endif
//  241 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  242 struct ep_info_t funcList[] = {
funcList:
        DATA8
        DS 33
        REQUIRE `?<Initializer for funcList>`
        REQUIRE __INIT_XDATA_I
//  243 #if defined(ZDO_COORDINATOR)
//  244     {
//  245         roomPwrManSys_StaChgRt,
//  246         roomPwrManSys_IncmRt,
//  247         roomPwrManSys_ToRt,
//  248         roomPwrManSys_ResAvbRt,
//  249         { DevPwrmanSys, 0, 3 },
//  250     },
//  251 #else
//  252 # if defined(IRPERS_NODE)
//  253     {
//  254         NULL, NULL, sensorILLumTimeout, sensorIRPersResAvailable,
//  255         { DevIRPers, 0, 2 },                // type, id, refresh cycle
//  256     },
//  257 # elif defined(ILLUM_NODE)
//  258     {
//  259         NULL, NULL, sensorILLumTimeout, NULL,
//  260         { DevIllum, 0, 5 },                // type, id, refresh cycle
//  261     },
//  262 # elif defined(EXECUTER_NODE)
//  263     {
//  264         NULL, outputExecuteB, outputExecuteBTimeout, OutputExecuteBResAvailable,
//  265         { DevExecuter, 0, 7 },              // type, id, refresh cycle
//  266     },
//  267 #elif defined(TEMP_NODE)
//  268     {
//  269         NULL, NULL, sensorTempTimeout, sensorTempResAvailable,
//  270         { DevTemp, 1, 5 },                 // type, id, refresh cycle
//  271     },
//  272 #elif defined(HUMM_NODE)
//  273     {
//  274         NULL, NULL, sensorHummTimeout, sensorHummResAvailable,
//  275         { DevHumm, 0, 5 },                 // type, id, refresh cycle
//  276     },
//  277 # else
//  278 #  error You must define one device
//  279 # endif
//  280 #endif
//  281 };
//  282 
//  283 // 不能修改下面的内容!!!

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  284 const uint8 funcCount = sizeof(funcList) / sizeof(funcList[0]);
funcCount:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for funcList>`:
        DATA16
        DW 0H
        DW `??outputExecuteB::?relay`
        DW `??outputExecuteBTimeout::?relay`
        DW `??OutputExecuteBResAvailable::?relay`
        DATA8
        DB 2
        DB 0
        DB 7
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??OutputExecuteBResAvailable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    OutputExecuteBResAvailable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??outputExecuteB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    outputExecuteB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??outputExecuteBTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    outputExecuteBTimeout

        END
// 
// 300 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//  33 bytes in segment XDATA_I
//  33 bytes in segment XDATA_ID
//   1 byte  in segment XDATA_ROM_C
// 
//  51 bytes of CODE     memory
//   1 byte  of CONST    memory
//   0 bytes of DATA     memory (+ 1 byte shared)
// 300 bytes of HUGECODE memory
//  33 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
